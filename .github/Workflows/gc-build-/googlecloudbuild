Unsupported architecture provided: 
bash: return: can only `return' from a function or sourced script
mbg198618@cloudshell:~$ 
mbg198618@cloudshell:~$ HOST_OS="linux"
mbg198618@cloudshell:~$ HOST_ARCH="x86_64"
mbg198618@cloudshell:~$ export CC_host=$(command -v gcc)
mbg198618@cloudshell:~$ export CXX_host=$(command -v g++)
mbg198618@cloudshell:~$ 
mbg198618@cloudshell:~$ host_gcc_version=$($CC_host --version | grep gcc | awk '{print $NF}')
mbg198618@cloudshell:~$ major=$(echo $host_gcc_version | awk -F . '{print $1}')
mbg198618@cloudshell:~$ minor=$(echo $host_gcc_version | awk -F . '{print $2}')
mbg198618@cloudshell:~$ if [ -z $major ] || [ -z $minor ] || [ $major -lt 6 ] || [ $major -eq 6 -a $minor -lt 3 ]; then
>   echo "host gcc $host_gcc_version is too old, need gcc 6.3.0"
>   return 1
> fi
mbg198618@cloudshell:~$ 
mbg198618@cloudshell:~$ SUFFIX="$TOOLCHAIN_NAME$ANDROID_SDK_VERSION"
mbg198618@cloudshell:~$ TOOLCHAIN=$NDK_PATH/toolchains/llvm/prebuilt/$HOST_OS-$HOST_ARCH
mbg198618@cloudshell:~$ 
mbg198618@cloudshell:~$ export PATH=$TOOLCHAIN/bin:$PATH
mbg198618@cloudshell:~$ export CC=$TOOLCHAIN/bin/$SUFFIX-clang
mbg198618@cloudshell:~$ export CXX=$TOOLCHAIN/bin/$SUFFIX-clang++
mbg198618@cloudshell:~$ 
mbg198618@cloudshell:~$ 
mbg198618@cloudshell:~$ GYP_DEFINES="target_arch=$ARCH"
mbg198618@cloudshell:~$ GYP_DEFINES+=" v8_target_arch=$ARCH"
mbg198618@cloudshell:~$ GYP_DEFINES+=" android_target_arch=$ARCH"
mbg198618@cloudshell:~$ GYP_DEFINES+=" host_os=$HOST_OS OS=android"
mbg198618@cloudshell:~$ export GYP_DEFINES
mbg198618@cloudshell:~$ 
mbg198618@cloudshell:~$ if [ -f "configure" ]; then
>     ./configure \
>         --dest-cpu=$DEST_CPU \
>         --dest-os=android \
>         --without-snapshot \
>         --openssl-no-asm \
>         --cross-compiling
> fi
mbg198618@cloudshell:~$ # pmake might add -J (private)
mbg198618@cloudshell:~$ FLAGS=${.MAKEFLAGS:C/\-J ([0-9]+,?)+//W}
bash: ${.MAKEFLAGS:C/\-J ([0-9]+,?)+//W}: bad substitution
mbg198618@cloudshell:~$ 
mbg198618@cloudshell:~$ all: .DEFAULT
bash: all:: command not found
mbg198618@cloudshell:~$ .DEFAULT:
bash: .DEFAULT:: command not found
mbg198618@cloudshell:~$ @command -v gmake > /dev/null 2>&1 ||\
> 
Display all 2306 possibilities? (y or n)
!
./
:
[
[[
]]
{
}
2to3-2.7
aa-enabled
aa-exec
aa-remove-unknown
aa-status
aa-teardown
accessdb
aclocal
aclocal-1.16
acyclic
add-apt-repository
addgnupghome
addgroup
addpart
addr2line
add-shell
adduser
aebundler
aedeploy
aefix
agetty
alias
_allowed_groups
_allowed_users
anthoscli
apparmor_parser
apparmor_status
appcfg.py
appletviewer
applygnupgdefaults
appres
apropos
apt
apt-add-repository
apt-cache
apt-cdrom
apt-config
apt-get
apt-key
apt-mark
ar
arch
arp
arpd
arptables
arptables-nft
arptables-nft-restore
arptables-nft-save
arptables-restore
arptables-save
as
ast-to-pattern
> uired for node.js to build.\
> 
.bash_history
.bash_logout
.bashrc
.cache/
.cloudcode/
.config/
.docker/
.profile
README-cloudshell.txt
.theia/
.yarn/
> 
.bash_history
.bash_logout
.bashrc
.cache/
.cloudcode/
.config/
.docker/
.profile
README-cloudshell.txt
.theia/
.yarn/
> Install and try again" && exit 1)
> @gmake ${.FLAGS} ${.TARGETS}
> 
> .PHONY: test
> # TODO(bcoe): re-enable coverage report comments, once we can figure out
> # how to make them more accurate for the Node.js project,
> # See: https://github.com/nodejs/node/issues/35759
> comment: false
> #  # Only show diff and files changed:
> #  layout: "diff, files"
> #  # Don't post if no changes in coverage:
> #  require_changes: true
> 
> codecov:
>   notify:
>     # Wait for all coverage builds:
>     after_n_builds: 2
> ~#gcloud config
> #!/bin/sh
bash: !/bin/sh: event not found
> 
> # Locate an acceptable Python interpreter and then re-execute the script.
> # Note that the mix of single and double quotes is intentional,
> # as is the fact that the ] goes on a new line.
> _=[ 'exec' '/bin/sh' '-c' '''
> command -v python3.9 >/dev/null && exec python3.9 "$0" "$@"
> command -v python3.8 >/dev/null && exec python3.8 "$0" "$@"
> command -v python3.7 >/dev/null && exec python3.7 "$0" "$@"
> command -v python3.6 >/dev/null && exec python3.6 "$0" "$@"
> command -v python3 >/dev/null && exec python3 "$0" "$@"
> exec python "$0" "$@"
> ''' "$0" "$@"
> ]
> del _
> 
> import sys
> try:
>   from shutil import which
> except ImportError:
>   from distutils.spawn import find_executable as which
> 
> print('Node.js configure: Found Python {}.{}.{}...'.format(*sys.version_info))
> acceptable_pythons = ((3, 9), (3, 8), (3, 7), (3, 6))
> if sys.version_info[:2] in acceptable_pythons:
>   import configure
> else:
>   python_cmds = ['python{}.{}'.format(*vers) for vers in acceptable_pythons]
>   sys.stderr.write('Please use {}.\n'.format(' or '.join(python_cmds)))
>   for python_cmd in python_cmds:
>       python_cmd_path = which(python_cmd)
>       if python_cmd_path and 'pyenv/shims' not in python_cmd_path:
>         sys.stderr.write('\t{} {}\n'.format(python_cmd_path, ' '.join(sys.argv[:1])))
>   sys.exit(1)
> ~# run gcloud config
> ~# run gcloud buil
> help
